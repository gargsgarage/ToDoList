/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.URLDecoder;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class TODOServer {

    TODOList todos;

    // need to do:
    /*
     * 1. have the html header
     * 2. have the task list
     * 2.1 if the task list is empty then print that else print all of the tasks
     * 3.print the form
     * 4.pring the end
     */

    private final String HTML_ADD_TASK_HEADER = """
            <!DOCTYPE html>
            <html lang=\"en\">
            <body>
            """;

    private final String HTML_UPDATE_TASK_HEADER = """
            <!DOCTYPE html>
            <html lang=\"en\">
            <head>
                <title>Update Task</title>
            </head>
            <body>
                """;

    private final String HTML_ADD_TASK_FORM = """
            <h1>Add Task</h1>
            <form method="post" action="/todos">
                <label for="taskTitle">Task Title:</label><br>
                <input type="text" id="taskTitle" name="taskTitle" /><br>
                <input type="submit" value="Add Task" />
            </form>
            """;

    private final String UPDATE_TASK_FORM = """
            <h1>Update Task</h1>
            <form method="post" action="/todos/update">
                <input type="hidden" name="id" value="%d" />
                <label for="taskTitle">Task Title:</label><br>
                <input type="text" id="taskTitle" name="taskTitle" value="%s" /><br>

                <label><input type="radio" name="status" value="NOT_STARTED"> Not Started</label><br>
                <label><input type="radio" name="status" value="IN_PROGRESS"> In Progress</label><br>
                <label><input type="radio" name="status" value="COMPLETED"> Completed</label><br>

                <input type="submit" value="Update" />
            </form>
            """;

    private final String HTML_END = """
            </body>
            </html>
            """;

    public TODOServer() {
        todos = new TODOList();
    }

    public static void main(String[] args) {
        // create the server
        TODOServer server = new TODOServer();
        // link it to an HTTP server
        server.startTODOListService();
    }

    public void startTODOListService() {
        try {
            // create HTTP server
            HttpServer httpServer = HttpServer.create();
            // set up a path to handle requests and call the handler
            // associated with it to generate the response
            httpServer.createContext("/todos", new TODOListHandler());
            httpServer.createContext("/todos/update", new UpdateListHandler());
            // tell the server to see what port to listen to
            httpServer.bind(new InetSocketAddress(8000), 0);

            httpServer.start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public String getTodosPageHtml() {

        StringBuffer output = new StringBuffer();
        output.append(HTML_ADD_TASK_HEADER);
        output.append(getTodosAsHtml());
        output.append("</br>");
        output.append(HTML_ADD_TASK_FORM);
        output.append(HTML_END);

        return output.toString();
    }

    public String getTodosAsHtml() {
        StringBuffer output = new StringBuffer();
        if (todos.isEmpty()) {
            output.append("<p>list is empty</p></br>");
        } else {
            output.append("<ul>");
            for (int i = 0; i < todos.size(); i++) {
                Task task = todos.getTask(i);
                int taskID = todos.getTaskID(task);
                output.append("<li>");
                output.append("<a href=\"/todos/update?id=").append(taskID).append("\">");
                output.append(task.toString());
                output.append("</a>");
                output.append("</li>");
            }
            output.append("</ul>");
        }

        return output.toString();
    }

    public Map<String, String> getFormParams(InputStream inputStream) {
        // scan the user input
        Scanner sc = new Scanner(inputStream);
        String requestBody;
        if (sc.hasNext()) {
            requestBody = sc.useDelimiter("\\A").next();
        } else {
            requestBody = "";
        }
        sc.close();

        // id, taskTitle, status
        // id=1&taskTitle=foo+bar+baz&status=IN_PROGRESS

        // id: 1
        // taskTitle: foo bar baz
        // status: IN_PROGRESS
        String[] pairs = requestBody.toString().split("&");
        Map<String, String> params = new HashMap<>();
        for (String pair : pairs) {
            String[] keyValue = pair.split("=");
            if (keyValue.length == 2) {
                params.put(URLDecoder.decode(keyValue[0], StandardCharsets.UTF_8),
                        URLDecoder.decode(keyValue[1], StandardCharsets.UTF_8));
            }
        }
        return params;
    }

    public class TODOListHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange exchange) throws IOException {

            // figure out which type of request needs to be handled
            String requestMethod = exchange.getRequestMethod();

            // check if request method is post (dont need to check for get
            // request because get request will just execute the code at the bottom
            // anyways)
            // if a post request, then just need to add user inputed task to the tasklist
            if (requestMethod.equalsIgnoreCase("POST")) {
                Map<String, String> params = getFormParams(exchange.getRequestBody());

                String title = params.get("taskTitle");
                if (!title.isEmpty()) {
                    Task t = new Task(title, Task.Status.NOT_STARTED);
                    todos.addTask(t);
                }

            }
            // get the html for the handled request
            String body = getTodosPageHtml();

            // make sure the response code is right based on the type of request made
            int rCode = 200;
            if (requestMethod.equalsIgnoreCase("POST")) {
                rCode++;
            }

            // send the response headers
            exchange.sendResponseHeaders(rCode, body.length());
            // send the response body
            exchange.getResponseBody().write(body.getBytes());

        }

    }

    public class UpdateListHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // Todo:
            /*
             * 1. make the each of the tasks on the task list page links
             * 2. each link will go to this new path ("/todos/update#" + id) where there
             * will be forms for:
             * 2.1 drop-down menu for selecting status
             * 2.2 entering new title for the task
             * 2.3 submit button that takes you back to the task list page with
             * the updated task
             * 
             */

            // check if it a request to get the task in an editable form
            if (exchange.getRequestMethod().equalsIgnoreCase("GET")) {
                int taskID = extractId(exchange.getRequestURI().getQuery());

                // if not found, return
                if (taskID < 0) {
                    exchange.sendResponseHeaders(404, 0);
                    return;
                }

                // return the editable task form
                Task task = todos.getTask(taskID);
                String body = getUpdatePageHtml(taskID, task.getTitle());
                exchange.sendResponseHeaders(200, body.length()); // 302 Found redirect status code
                exchange.getResponseBody().write(body.getBytes());
                return;

            } else if (exchange.getRequestMethod().equalsIgnoreCase("POST")) {

                // get the task id
                Map<String, String> params = getFormParams(exchange.getRequestBody());
                int taskID = -1;
                try {
                    taskID = Integer.parseInt(params.get("id"));
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }

                // if not found, return
                if (taskID < 0) {
                    exchange.sendResponseHeaders(404, 0);
                    return;
                }

                // we have task ID, get the corresponding task
                Task task = todos.getTask(taskID);
                
                // set the new title
                task.setTitle(params.get("taskTitle"));

                // set the new status
                Task.Status newStatus = Task.Status.valueOf(params.get("status"));
                task.setStatus(newStatus);

                // as of now, does not go back to /todos, will implement when path works
                // correctly
                exchange.getResponseHeaders().set("location", "/todos");
                exchange.sendResponseHeaders(302, -1); // 302 Found redirect status code
            }
        }

        private int extractId(String query) {
            int taskID = -1;
            if (query != null && query.startsWith("id=")) {
                // will get the id in the form of a string from the query
                String taskIDStr = query.substring(3);
                try {
                    taskID = Integer.parseInt(taskIDStr);
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
            return taskID;
        }

        public String getUpdatePageHtml(int id, String title) {
            StringBuffer output = new StringBuffer();
            output.append(HTML_UPDATE_TASK_HEADER);
            output.append("</br>");
            output.append(String.format(UPDATE_TASK_FORM, id, title));
            output.append(HTML_END);

            return output.toString();
        }
    }

}
