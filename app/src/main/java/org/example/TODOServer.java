/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.Scanner;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class TODOServer {

    TODOList todos;

    //need to do:
    /*
     * 1. have the html header
     * 2. have the task list
     *      2.1 if the task list is empty then print that else print all of the tasks
     * 3.print the form
     * 4.pring the end
    */

    private final String HTML_HEADER = """
            <!DOCTYPE html>
            <html lang=\"en\">
            <head>
                <meta charset=\"UTF-8\">
                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
                <title>Add Task</title>
            </head>
            <body>
            """;

    private final String HTML_FORM = """ 
            <h1>Add Task</h1>
            <form method=\"post\" action=\"/todos\">
                <label for=\"taskTitle\">Task Title:</label><br>
                <input type=\"text\" id=\"taskTitle\" name=\"taskTitle\"><br>
                <input type=\"submit\" value=\"Add Task\">
            </form>
            """;

    private final String HTML_END = """
        </body>
        </html>
        """;

    public TODOServer() {
        todos = new TODOList();
    }

    public static void main(String[] args) {
        // create the server
        TODOServer server = new TODOServer();
        // link it to an HTTP server
        server.startTODOListService();
    }


    public void startTODOListService() {
        try {
            // create HTTP server
            HttpServer httpServer = HttpServer.create();
            // set up a path to handle requests and call the handler
            // associated with it to generate the response
            httpServer.createContext("/todos", new TODOListHandler());
            // tell the server to see what port to listen to
            httpServer.bind(new InetSocketAddress(8080), 0);

            httpServer.start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public String getPageHtml(){

        StringBuffer output = new StringBuffer();
        output.append(HTML_HEADER);
        output.append(getTodosAsHtml());
        output.append("</br>");
        output.append(HTML_FORM);
        output.append(HTML_END);

        return output.toString();
    }

    public String getTodosAsHtml(){
        StringBuffer output = new StringBuffer();
        if(todos.isEmpty()){
            output.append("<p>list is empty</p></br>");
        }
        else{
            output.append("<ul>");
            for(int i = 0; i < todos.size(); i++){
                Task task = todos.getTask(i);
                output.append("<li>");
                output.append(task.toString());
                output.append("</li>");
            }
        }
        
        output.append("</ul>");
        return output.toString();
    }

    public class TODOListHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange exchange) throws IOException {

            // figure out which type of request needs to be handled
            String requestMethod = exchange.getRequestMethod();
                
            //check if request method is post (dont need to check for get
            //request because get request will just execute the code at the bottom
            //anyways)
            //if a post request, then just need to add user inputed task to the tasklist
            if (requestMethod.equalsIgnoreCase("POST")) {

                // scan the user input
                Scanner sc = new Scanner(exchange.getRequestBody());
                String userInput;
                if (sc.hasNext()) {
                    userInput = sc.useDelimiter("\\A").next();
                } else {
                    userInput = "";
                }
                sc.close();
                
                if(!userInput.isEmpty()){
                    Task t = new Task(userInput, Task.Status.NOT_STARTED);
                    todos.addTask(t);
                }
                
            }
            //get the html for the handled request
            String body = getPageHtml();

            //make sure the response code is right based on the type of request made
            int rCode = 200;
            if(requestMethod.equalsIgnoreCase("POST")){
                rCode++;
            }

            // send the response headers
            exchange.sendResponseHeaders(rCode, body.length());
            // send the response body
            exchange.getResponseBody().write(body.getBytes());

        }

    }

}
