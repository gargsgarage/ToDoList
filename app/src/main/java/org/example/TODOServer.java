/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Scanner;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;

public class TODOServer {

    TODOList todos;

    private static final String HTML_BODY_START = """
            <!DOCTYPE html>
            <html lang=\"en\">
            <head>
                <meta charset=\"UTF-8\">
                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
                <title>Add Task</title>
            </head>
            <body>
            """;

    private static final String CREATE_TASK_FORM = """
            <h1>Add Task</h1>
            <form method=\"post\" action=\"/todos\">
                <label for=\"taskTitle\">Task Title:</label><br>
                <input type=\"text\" id=\"taskTitle\" name=\"taskTitle\"><br>
                <input type=\"submit\" value=\"Add Task\">
            </form>
            """;

    private static final String HTML_BODY_END = """
            </body>
            </html>
            """;


    public static void main(String[] args) {
        // create the server
        TODOServer server = new TODOServer();
        // link it to an HTTP server
        server.startTODOListService();
    }

    public TODOServer() {
        todos = new TODOList();
    }

    public void startTODOListService() {
        try {
            // create HTTP server
            HttpServer httpServer = HttpServer.create();
            // set up a path to handle requests and call the handler
            // associated with it to generate the response
            httpServer.createContext("/todos", new TODOListHandler());
            // tell the server to see what port to listen to
            httpServer.bind(new InetSocketAddress(8080), 0);

            httpServer.start();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public class TODOListHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if (exchange.getRequestMethod().equalsIgnoreCase("GET")) {
                // get the todos page as html
                String responseHtml = getTaskListPage();

                // send the response headers and body to the client
                exchange.sendResponseHeaders(200, responseHtml.length());
                exchange.getResponseBody().write(responseHtml.getBytes());
            } else if (exchange.getRequestMethod().equalsIgnoreCase("POST")) { // create task
                // scan the user input
                String input = null;
                try (Scanner scanner = new Scanner(exchange.getRequestBody(), StandardCharsets.UTF_8.name())) {
                    input = scanner.useDelimiter("\\A").next();
                    if (!input.isEmpty() && !input.isBlank()) {
                        Task task = new Task(input, Task.Status.NOT_STARTED);
                        todos.addTask(task);
                    }
                }

                // return the response
                String responseHtml = getTaskListPage();
                exchange.sendResponseHeaders(201, responseHtml.length());
                exchange.getResponseBody().write(responseHtml.getBytes());
            } else {
                throw new UnsupportedOperationException("Unimplemented method 'handle'");
            }
        }
    }

    private String getTaskListPage() {
        StringBuffer body = new StringBuffer();

        // add the html and body start
        body.append(HTML_BODY_START);

        // add the tasks as a list
        body.append(getTodosAsHtml(todos.getAll()));

        // add the tasks form after the tasks list.
        body.append("</hr");
        body.append(CREATE_TASK_FORM);

        // close the body and html
        body.append(HTML_BODY_END);
        return body.toString();
    }

    private String getTodosAsHtml(List<Task> todos) {
        // if the task list is empty, just return a message
        if (todos.isEmpty()) {
            return "<p> Your task list is empty</p> </br>";
        }

        // we have tasks. let's return an HTLM list
        StringBuffer sb = new StringBuffer();
        sb.append("<ul>");
        for (int i = 0; i < todos.size(); i++) {
            Task task = todos.get(i);
            sb.append("<li>");
            sb.append(task.getStatus().toString());
            sb.append(",");
            sb.append(task.getTitle());
            sb.append("</li>");
        }
        return sb.toString();
    }
}
